defmodule ElixirLearn.Structs.StructsToMaps do
  @moduledoc """
  Recusuvely convert all structs into maps

  This module does not remove meta data like generated by Ecto
  """

  alias ElixirLearn.Structs.NestedStruct

  @doc """
  Convert struct on map and return it
  """
  @spec struct_to_map(any) :: map
  def struct_to_map(the_struct, the_map \\ %{})

  def struct_to_map(the_struct, the_map) when is_struct(the_struct) do
    IO.inspect("struct")

    converted =
      the_struct
      |> Map.from_struct()
      # |> IO.inspect()
      |> Enum.reduce(the_map, &struct_to_map(&2, &1))

    # IO.inspect(converted, label: "====converted")
    converted
    # :ok
  end

  # def struct_to_map(the_list, the_map) when is_list(the_list) do
  #   converted = Enum.reduce(the_list, the_map, &struct_to_map(&2, &1))

  #   # IO.inspect(converted, label: "====when list")
  #   converted
  #   # :ok
  # end

  def struct_to_map(the_map, {key, value}) when is_struct(value) do
    # IO.inspect("tuple struct")
    # IO.inspect(the_map, label: "the_map")
    # IO.inspect(key, label: "key")
    # IO.inspect(value, label: "value")
    Map.put(the_map, key, struct_to_map(value, the_map))
  end

  def struct_to_map(the_map, {key, value}) when is_list(value) do
    # IO.inspect("tuple struct")
    # IO.inspect(the_map, label: "the_map")
    # IO.inspect(key, label: "key")
    # IO.inspect(value, label: "value")
    result = Enum.reduce(value, the_map, &struct_to_map(&2, &1))
    Map.put(the_map, key, result)
  end

  # def struct_to_map(the_map, {key, value}), do: Map.put(the_map, key, value)
  def struct_to_map(the_map, {key, value}) do
    IO.inspect("tuple")
    # IO.inspect(the_map, label: "the_map")
    # IO.inspect(key, label: "key")
    # IO.inspect(value, label: "value")
    Map.put(the_map, key, value)
  end

  # def struct_to_map(the_list, the_map) do
  #   IO.inspect(the_list, label: "the_list")
  #   IO.inspect(the_map, label: "the_map")
  # end

  def sample() do
    struct_to_map(NestedStruct.generate_sample_post())
  end
end

# %Post{
#   author: %Author{
#     contact_email: "johndoe@jhondoe.com",
#     first_name: "John",
#     last_name: "Doe"
#   },
#   body: "Sample Body",
#   comments: [
#     %Comment{
#       author: %Author{
#         contact_email: "johndoe@jhondoe.com",
#         first_name: "John",
#         last_name: "Doe"
#       },
#       body: "First comment"
#     },
#     %Comment{
#       author: %Author{
#         contact_email: "johndoe@jhondoe.com",
#         first_name: "John",
#         last_name: "Doe"
#       },
#       body: "Second comment"
#     },
#     %Comment{
#       author: %Author{
#         contact_email: "johndoe@jhondoe.com",
#         first_name: "John",
#         last_name: "Doe"
#       },
#       body: "Third comment"
#     }
#   ],
#   title: "Sample Title"
# }
